// Child Nodes
// How many direct and indirect child nodes does each parent node — starting 
// with the element with an id of 1 — have in the DOM generated by the following
//  HTML:

<div id="1">
  <h1 id="2">Hello, <em id="3">World</em></h1>
  <p id="4">
    Welcome to wonderland. This is an
    <span id="5">awesome</span> place.
  </p>
  <a href="#" id="6"><strong id="7">Enter</strong></a>
  <div id="8"><p id="9"><a href="#" id="10">Go back</a></p></div>
</div>

// Consider the following when counting the direct and indirect child nodes for 
// each parent node:

// Any DOM node that has at least one child node is a parent node.
// Indirect child nodes are the child nodes of child nodes.

id = '1'
direct children: 4 Elements, 5 empty text nodes = 9 children nodes
indirect children: 5 Elements, 7 text nodes = 12 indirect children nodes
id = '2'
direct children: 2
indirect children: 1 
id = '3'
direct children: 1
indirect children: 0 
id = '4'
direct children: 3
indirect children: 1
id = '5'
direct children: 1
indirect children: 0 
id = '6'
direct children: 1
indirect children: 1 
id = '7'
direct children: 1
indirect children: 0 
id = '8'
direct children: 1
indirect children: 2
id = '9'
direct children: 1
indirect children: 1 
id = '10'
direct children: 1
indirect children: 0 

// Further Exploration
// Write code that returns the number of direct and indirect child nodes for a 
// given parent node as an array.

function walk(node, callback) {
  callback(node);
  for (let i = 0; i < node.childNodes.length; i += 1) {
    walk(node.childNodes[i] ,callback);
  }
}

function childNodes(startingId) {
  let parentNode = document.getElementById(String(startingId));
  let directCount = parentNode.childNodes.length;
  let indirectCount = 0;
  
  walk(parentNode, function(node) {
    if (node.parentNode !== parentNode && node !== parentNode ) {
      console.log(node);
      indirectCount += 1;
    }
  });

  return [directCount, indirectCount];
}

// sample output
> childNodes(1);
= [9, 12]
> childNodes(4);
= [3, 1]
> childNodes(9);
= [1, 1]